load("C:/Users/Administrator/Desktop/msDatabase_hilic0.0.2.rda")
spectra = msDatabase_hilic0.0.2@spectra.data
spectra
saveRDS(spectra, file = "./spectra.rds")
spectra <- readRDS("~/spectra.rds")
spectra <- readRDS("~/spectra.rds")
lib.pos = spectra$Spectra.positive
lib.neg = spectra$Spectra.negative
save(lib.pos, lib.neg, file = "./spectra.rda")
load("~/spectra.rda")
load("~/spectra.rda")
help(paste)
paste(c(1,2,3), c(5,6))
paste(c(1,2,3), c(5,6), sep = "+")
paste(c(1,2,32,34,23,1,23,4,3), c(1,5,6), sep = "+")
paste(c(1,2,32,34,23,1,23,4,3,1), c(1,5,6), sep = "+")
c(1,2,3,4) + c(1,2,3)
help(apply)
a = data.frame(cx = 1:8, cy = 99, cz = 8:(8+8))
a = data.frame(cx = 1:9, cy = 99, cz = 8:(8+8))
a
apply(a, MARGIN = 1, function(x) x)
apply(a, MARGIN = 1, function(x) print(x))
apply(a, MARGIN = 1, function(x) str(x))
a
apply(a, MARGIN = 1, function(x) sum(x))
5/0
log(0)
0/0
help(.Machine)
help(pdf)
help(svg)
help(writeLines)
help(writeLines)
help("sink")
SCA_scRNASEQ_TISSUE_FETAL_LIVER <- readRDS("G:/SCA_scRNASEQ_TISSUE_FETAL_LIVER.RDS")
SCA_scRNASEQ_TISSUE_FETAL_LIVER <- readRDS("G:/SCA_scRNASEQ_TISSUE_FETAL_LIVER.RDS")
install.packages("SeuratObject")
SCA_CyTOF_TISSUE_WHOLE_BLOOD_SDY1389_Whole_Blood <- readRDS("G:/Erica/test/SCA_CyTOF_TISSUE_WHOLE_BLOOD_SDY1389_Whole_Blood.RDS")
install.packages("Matrix")
install.packages("NMF")
library(NMF)
install.packages ("Biobase")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
BiocManager::install("Biobase")
BiocManager::install("Biobase")
BiocManager::install("Biobase")
BiocManager::install("Biobase")
BiocManager::install("BiocGenerics")
BiocManager::install("BiocGenerics")
BiocManager::install("BiocGenerics")
BiocManager::install("BiocGenerics")
help("sys.on.exit")
browser()
a=1
b=2
browser()
a
system.exit
exit
# 假设我们有一个函数，我们怀疑它在处理某些输入时会出错
my_function <- function(x) {
y <- x * 2
browser() # 进入调试模式
z <- y + 10
return(z)
}
my_function(5)
ls()
x
x==6
ls()
ls()
z
data_matrix <- matrix(rnorm(100), nrow=10)
rownames(data_matrix) <- paste("Metabolite", 1:10)
colnames(data_matrix) <- paste("Sample", 1:10)
data = data_matrix
data
ranks <- apply(data, 2, rank, ties.method = "average")
ranks
avg_ranks <- rowMeans(data[ranks])
avg_ranks <- rowMeans(ranks)
avg_ranks
normalized_data <- matrix(avg_ranks, nrow = nrow(data), byrow = TRUE)
normalized_data
for (i in 1:ncol(data)) {
normalized_data[, i] <- normalized_data[, i][order(ranks[, i])]
}
for (i in 1:ncol(data)) {
normalized_data[, i] <- data[, i][order(ranks[, i])]
}
for (i in 1:ncol(data)) {
print( data[, i][order(ranks[, i])])
}
ranks <- apply(data, 2, rank, ties.method = "average")
ranks
avg_ranks <- rowMeans(data[ranks])
avg_ranks <- apply(ranks, 1, function(x) mean(data[x]))
avg_ranks
normalized_data <- matrix(avg_ranks, nrow = nrow(data), byrow = TRUE)
normalized_data
for (i in 1:ncol(data)) {
normalized_data[, i] <- normalized_data[, i][order(ranks[, i])]
}
normalized_data <- matrix(avg_ranks, nrow = nrow(data), ncol = ncol(data), byrow = FALSE)
normalized_data
avg_ranks
for (i in 1:ncol(data)) {
normalized_data[, i] <- normalized_data[order(ranks[, i]), i]
}
normalized_data
data_matrix <- matrix(rnorm(100), nrow=10)
rownames(data_matrix) <- paste("Metabolite", 1:10)
colnames(data_matrix) <- paste("Sample", 1:10)
# 打印原始数据矩阵
print("Original Data Matrix:")
print(data_matrix)
data = data_matrix
ranks <- apply(data, 2, rank, ties.method = "average")
# 计算排序后的平均值
avg_ranks <- apply(ranks, 1, function(x) mean(data[x]))
avg-ranks
avg_ranks
normalized_data <- matrix(avg_ranks, nrow = nrow(data), ncol = ncol(data), byrow = FALSE)
normalized_data
install.packages("googledrive")
setwd("G:/MetaboLights/test/IBD_Benchmark_Data")
library(googledrive);
temp <- tempfile(fileext = ".csv")
dl1 <- drive_download(
as_id("1wEh2P81J_xFWJs5y4mq98-FsjxJ5wmBO"), path = temp, overwrite = TRUE)
dl1 <- drive_download(
as_id("1wEh2P81J_xFWJs5y4mq98-FsjxJ5wmBO"), path = temp, overwrite = TRUE)
rlang::last_trace()
install.packages("crayon")
rlang::last_trace()
drive_auth(email = "xie.guigang@gmail.com")
