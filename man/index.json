{"readJSON":{"author":null,"declares":{"name":"readJSON","parameters":[{"name":"name","text":null},{"name":"what","text":null}],"sourceMap":{"File":"pathway.R","Line":"5","Method":{"Method":"readJSON","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"readJSON"},"pathmaps":{"author":null,"declares":{"name":"pathmaps","parameters":[{"name":"outputdir","text":"'.\/'"},{"name":"highlights","text":"NULL"},{"name":"default.fill.color","text":"'lightgray'"}],"sourceMap":{"File":"pathway.R","Line":"14","Method":{"Method":"pathmaps","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"pathmaps"},"pathway_metabolites":{"author":null,"declares":{"name":"pathway_metabolites","parameters":[{"name":"cas.id","text":null}],"sourceMap":{"File":"pathway.R","Line":"41","Method":{"Method":"pathway_metabolites","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"pathway_metabolites"},"requestRepository":{"author":null,"declares":{"name":"requestRepository","parameters":[],"sourceMap":{"File":"repository.R","Line":"4","Method":{"Method":"requestRepository","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":"requestRepository"},"extract_spectra":{"author":null,"declares":{"name":"extract_spectra","parameters":[{"name":"maf","text":null},{"name":"rawfiles","text":null},{"name":"outputdir","text":"'.\/'"}],"sourceMap":{"File":"spectrum.R","Line":"6","Method":{"Method":"extract_spectra","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"","details":"","examples":"","keywords":[],"parameters":[{"name":"maf","text":"a character vector of the file path to the maf annotation result table tsv files."},{"name":"rawfiles","text":"a character vector of the raw data files, should be in mzpack data format!"}],"returns":null,"see_also":"","title":"Workflow function for extract the reference spectrum"},".onLoad":{"author":null,"declares":{"name":".onLoad","parameters":[],"sourceMap":{"File":"zzz.R","Line":"8","Method":{"Method":".onLoad","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":null,"details":null,"examples":null,"keywords":null,"parameters":null,"returns":null,"see_also":null,"title":".onLoad"},"combine_sampleinfo":{"author":null,"declares":{"name":"combine_sampleinfo","parameters":[{"name":"x","text":null},{"name":"sampleinfo","text":null}],"sourceMap":{"File":"combine_sampleinfo.R","Line":"45","Method":{"Method":"combine_sampleinfo","Module":"declare_function","Namespace":"SMRUCC\/R#"}}},"description":"This function performs row-wise merging of transposed expression data with\r\nsample metadata, requiring matching row names between the two inputs.","details":"","examples":"# Create example data\r\nexpr_matrix <- matrix(rnorm(20), ncol=4,\r\ndimnames=list(paste0(\"Gene\",1:5), paste0(\"S\",1:4)))\r\nsample_data <- data.frame(\r\nsample_name = paste0(\"Sample\",1:4),\r\nsample_info = c(\"Control\", \"Control\", \"Treatment\", \"Treatment\"),\r\ncolor = c(\"#1b9e77\", \"#1b9e77\", \"#d95f02\", \"#d95f02\"),\r\nrow.names = paste0(\"S\",1:4)\r\n)\r\n# Combine datasets\r\ncombined <- combine_sampleinfo(expr_matrix, sample_data)\r\nhead(combined[, 1:5])","keywords":[],"parameters":[{"name":"x","text":"A numeric matrix or data.frame containing expression data.\r\nRows represent features (genes\/proteins), columns represent samples."},{"name":"sampleinfo","text":"A data.frame containing sample metadata. Must include:\r\n\\itemize{\r\n\\item{sample_name: Character vector with sample identifiers}\r\n\\item{sample_info: Factor or character vector with sample classification}\r\n\\item{color: Character vector specifying display colors for samples}\r\n}\r\nRow names must match column names of the original expression matrix."}],"returns":"A merged data.frame with:\r\n\\itemize{\r\n\\item{First 3 columns: sample_name, class (from sample_info), color}\r\n\\item{Subsequent columns: expression values from input matrix}\r\n}\r\nNote: The input matrix is transposed before merging (samples become rows).","see_also":"\\code{\\link{merge}} for general data merging functionality","title":"Combine expression matrix with sample metadata"}}